#!/usr/bin/env node
var ref$, reject, each, keys, map, elemIndex, findIndex, join, isType, compact, concat, name, version, fs, download, downloadStatus, mkdirp, msg, tsvToI18nYamls, genI18nYamlsFromUrl, argv, destFolder, slice$ = [].slice;
ref$ = require('prelude-ls'), reject = ref$.reject, each = ref$.each, keys = ref$.keys, map = ref$.map, elemIndex = ref$.elemIndex, findIndex = ref$.findIndex, join = ref$.join, isType = ref$.isType, compact = ref$.compact, concat = ref$.concat;
ref$ = require('../package'), name = ref$.name, version = ref$.version;
fs = require('fs');
download = require('download');
downloadStatus = require('download-status');
mkdirp = require('mkdirp');
msg = function(m){
  return console.log(name + " (" + version + "): " + m);
};
tsvToI18nYamls = function(rawText, destFolder){
  var ref$, header, lines, locales, headerItems;
  ref$ = rawText.toString().split('\r\n'), header = ref$[0], lines = slice$.call(ref$, 1);
  locales = {};
  headerItems = header.split('\t');
  each(function(it){
    if (it !== '' && it !== '#' && it !== 'remark') {
      return locales[it] = elemIndex(it, headerItems);
    }
  })(
  headerItems);
  msg("Generating .yml files ...");
  return each(function(lang){
    var yamlLines, outputFile;
    yamlLines = join('\n')(
    map(function(line){
      var lineItems, keyIndex, indentNKey, value;
      lineItems = line.split('\t');
      keyIndex = findIndex(function(it){
        return it !== '';
      })(
      lineItems);
      if (!isType('Undefined', keyIndex)) {
        indentNKey = repeatString$('  ', keyIndex) + "" + lineItems[keyIndex];
        value = lineItems[locales[lang]];
        return line = (indentNKey + ":") + (value ? " " + value : '');
      }
    })(
    lines));
    outputFile = destFolder + "/" + lang + ".i18n.yml";
    msg("\t -> " + outputFile);
    return fs.writeFileSync(outputFile, yamlLines, {
      flag: 'w'
    });
  })(
  keys(
  locales));
};
genI18nYamlsFromUrl = function(url, destFolder){
  url = url || '';
  destFolder = destFolder || '.';
  return mkdirp(destFolder, function(err){
    if (err) {
      return msg("Error creating destination folder: " + destFolder);
    } else {
      msg("Created destination folder: " + destFolder);
      msg("Getting source TSV file from: " + url);
      return download(url).then(function(data){
        return tsvToI18nYamls(data.toString(), destFolder);
      });
    }
  });
};
argv = require('minimist')(process.argv.slice(2));
destFolder = argv.p || '.';
genI18nYamlsFromUrl(argv.s, destFolder);
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
//# sourceMappingURL=data:application/json;base64,
