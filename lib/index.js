#!/usr/bin/env node
var ref$, reject, each, keys, map, elemIndex, findIndex, join, isType, compact, concat, name, version, fs, download, downloadStatus, mkdirp, msg, tsvToI18n, genI18nFromUrl, argv, destFolder, format, slice$ = [].slice;
ref$ = require('prelude-ls'), reject = ref$.reject, each = ref$.each, keys = ref$.keys, map = ref$.map, elemIndex = ref$.elemIndex, findIndex = ref$.findIndex, join = ref$.join, isType = ref$.isType, compact = ref$.compact, concat = ref$.concat;
ref$ = require('../package'), name = ref$.name, version = ref$.version;
fs = require('fs');
download = require('download');
downloadStatus = require('download-status');
mkdirp = require('mkdirp');
msg = function(m){
  return console.log(name + " (" + version + "): " + m);
};
tsvToI18n = function(rawText, destFolder, format){
  var ref$, header, lines, locales, headerItems, prefixKeys;
  ref$ = rawText.toString().split('\r\n'), header = ref$[0], lines = slice$.call(ref$, 1);
  locales = {};
  headerItems = header.split('\t');
  each(function(it){
    if (it !== '' && it !== '#' && it !== 'remark') {
      return locales[it] = elemIndex(it, headerItems);
    }
  })(
  headerItems);
  switch (false) {
  case format !== 'yaml' && format !== 'yml':
    msg("Generating " + format + " files ...");
    return each(function(lang){
      var yamlLines, outputFile;
      yamlLines = join('\n')(
      map(function(line){
        var lineItems, keyIndex, indentNKey, value;
        lineItems = line.split('\t');
        keyIndex = findIndex(function(it){
          return it !== '';
        })(
        lineItems);
        if (!isType('Undefined', keyIndex)) {
          indentNKey = repeatString$('  ', keyIndex) + "" + lineItems[keyIndex];
          value = lineItems[locales[lang]];
          if (/^[\{\[]/.test(value)) {
            value = "'" + value + "'";
          }
          return line = (indentNKey + ":") + (value ? " " + value : '');
        }
      })(
      lines));
      outputFile = destFolder + "/" + lang + ".i18n.yml";
      msg("\t -> " + outputFile);
      return fs.writeFileSync(outputFile, yamlLines, {
        flag: 'w'
      });
    })(
    keys(
    locales));
  case !in$(format, ['json']):
    msg("Generating " + format + " files ...");
    prefixKeys = [];
    return each(function(lang){
      var jsonLines, jsonContent, outputFile;
      jsonLines = join(',\n')(
      reject(function(it){
        return it === '';
      })(
      map(function(line){
        var jsonLine, lineItems, keyIndex, compactedItems, thisKey, thisValue;
        jsonLine = '';
        lineItems = line.split('\t');
        keyIndex = findIndex(function(it){
          return it !== '';
        })(
        lineItems);
        compactedItems = compact(lineItems);
        if (keyIndex === 0) {
          prefixKeys = [];
        }
        if (compactedItems.length === 1) {
          prefixKeys[keyIndex] = compactedItems[0];
        }
        if (compactedItems.length > 1) {
          thisKey = compactedItems[0];
          thisValue = lineItems[locales[lang]].replace(/\"/gi, '\\"');
          jsonLine = "  \"" + join('.')(
          concat([prefixKeys, [thisKey]])) + "\" : \"" + thisValue + "\"";
        }
        return jsonLine;
      })(
      lines)));
      jsonContent = "{\n" + jsonLines + "\n}";
      outputFile = destFolder + "/" + lang + ".json";
      msg("\t -> " + outputFile);
      return fs.writeFileSync(outputFile, jsonContent, {
        flag: 'w'
      });
    })(
    keys(
    locales));
  default:
    return msg("Unsupported format!");
  }
};
genI18nFromUrl = function(url, destFolder, format){
  url = url || '';
  destFolder = destFolder || '.';
  return mkdirp(destFolder, function(err){
    if (err) {
      return msg("Error creating destination folder: " + destFolder);
    } else {
      msg("Created destination folder: " + destFolder);
      msg("Getting source TSV file from: " + url);
      return download(url).then(function(data){
        return tsvToI18n(data.toString(), destFolder, format);
      });
    }
  });
};
argv = require('minimist')(process.argv.slice(2));
destFolder = argv.p || '.';
format = argv.f || 'yml';
genI18nFromUrl(argv.s, destFolder, format);
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
//# sourceMappingURL=data:application/json;base64,
