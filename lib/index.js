#!/usr/bin/env node
var ref$, reject, each, keys, map, elemIndex, findIndex, join, isType, compact, concat, range, name, version, fs, download, mkdirp, xlsxToJson, Excel, msg, readSpreadsheet, composeYamlLine, dataToI18n, genI18nFromSrc, argv, destFolder, format, slice$ = [].slice;
ref$ = require('prelude-ls'), reject = ref$.reject, each = ref$.each, keys = ref$.keys, map = ref$.map, elemIndex = ref$.elemIndex, findIndex = ref$.findIndex, join = ref$.join, isType = ref$.isType, compact = ref$.compact, concat = ref$.concat;
range = require('lodash').range;
ref$ = require('../package'), name = ref$.name, version = ref$.version;
fs = require('fs');
download = require('download');
mkdirp = require('mkdirp');
xlsxToJson = require('node-excel-to-json');
Excel = require('exceljs');
msg = function(m){
  return console.log(name + " (" + version + "): " + m);
};
readSpreadsheet = function(filePath){
  var wb;
  wb = new Excel.Workbook();
  return wb.xlsx.readFile(filePath).then(function(){
    var ws, rowCount, colCount, result;
    ws = wb.getWorksheet(1);
    rowCount = ws.actualRowCount;
    colCount = ws.actualColumnCount;
    return result = range(1, rowCount + 1).map(function(i){
      return ws.getRow(i)._cells.splice(0, colCount).map(function(c){
        return c.value;
      });
    });
  })['catch'](function(reason){
    return reason;
  });
};
composeYamlLine = function(lineItems, valCol){
  var keyIndex, indentNKey, value, line;
  keyIndex = findIndex(function(it){
    return it !== null && it !== undefined && it !== '';
  })(
  lineItems);
  if (!isType('Undefined', keyIndex)) {
    indentNKey = repeatString$('  ', keyIndex) + "" + lineItems[keyIndex];
    value = lineItems[valCol];
    if (/^[\{\[]/.test(value)) {
      value = "'" + value + "'";
    }
    return line = (indentNKey + ":") + (value ? " " + value : '');
  }
};
dataToI18n = function(dataRows, destFolder, format){
  var header, rows, locales, headerItems, prefixKeys;
  header = dataRows[0], rows = slice$.call(dataRows, 1);
  locales = {};
  headerItems = header;
  each(function(it){
    if (it !== null && it !== undefined && it !== '' && it !== '#' && it !== 'remark') {
      return locales[it] = elemIndex(it, headerItems);
    }
  })(
  headerItems);
  switch (false) {
  case format !== 'yaml' && format !== 'yml':
    msg("Generating " + format + " files ...");
    return each(function(lang){
      var yamlRows, outFilePath;
      yamlRows = join('\n')(
      map(function(line){
        return composeYamlLine(line, locales[lang]);
      })(
      rows));
      outFilePath = destFolder + "/" + lang + ".i18n.yml";
      msg("\t -> " + outFilePath);
      return fs.writeFileSync(outFilePath, yamlRows, {
        flag: 'w'
      });
    })(
    keys(
    locales));
  case !in$(format, ['json']):
    msg("Generating " + format + " files ...");
    prefixKeys = [];
    return each(function(lang){
      var jsonRows, jsonContent, outFilePath;
      jsonRows = join(',\n')(
      reject(function(it){
        return it === '';
      })(
      map(function(line){
        var jsonLine, lineItems, keyIndex, compactedItems, thisKey, thisValue;
        jsonLine = '';
        lineItems = line;
        keyIndex = findIndex(function(it){
          return it !== null && it !== undefined && it !== '';
        })(
        lineItems);
        compactedItems = compact(lineItems);
        if (keyIndex === 0) {
          prefixKeys = [];
        }
        if (compactedItems.length === 1) {
          prefixKeys[keyIndex] = compactedItems[0];
        }
        if (compactedItems.length > 0) {
          thisKey = compactedItems[0];
          thisValue = lineItems[locales[lang]].replace(/\"/gi, '\\"');
          if (compactedItems.length > 1) {
            jsonLine = "  \"" + join('.')(
            concat([prefixKeys, [thisKey]])) + "\" : \"" + thisValue + "\"";
          }
          if (compactedItems.length === 1) {
            jsonLine = "  \"" + join('.')(
            prefixKeys) + "\" : \"" + thisValue + "\"";
          }
        }
        return jsonLine;
      })(
      rows)));
      jsonContent = "{\n" + jsonRows + "\n}";
      outFilePath = destFolder + "/" + lang + ".json";
      msg("\t -> " + outFilePath);
      return fs.writeFileSync(outFilePath, jsonContent, {
        flag: 'w'
      });
    })(
    keys(
    locales));
  default:
    return msg("Unsupported format!");
  }
};
genI18nFromSrc = function(src, destFolder, format){
  src = src || '';
  destFolder = destFolder || '.';
  if (!src.trim()) {
    msg("No data source specified");
    return;
  }
  return mkdirp(destFolder.trim(), function(err){
    if (err) {
      return msg("Error creating destination folder: " + destFolder);
    } else {
      msg("Created destination folder: " + destFolder);
      if (/^http/.test(src.toLowerCase())) {
        msg("Using remote i18n source (assuming valid .TSV): " + src);
        return download(src).then(function(rawData){
          var dataTable;
          dataTable = rawData.toString().split('\r\n').map(function(line){
            return line.split('\t');
          });
          return dataToI18n(dataTable, destFolder, format);
        });
      } else {
        msg("Using local i18n source (assuming valid .XLSX): " + src);
        return readSpreadsheet(src).then(function(result){
          return dataToI18n(result, destFolder, format);
        })['catch'](function(reason){
          return console.log(reason);
        });
      }
    }
  });
};
argv = require('minimist')(process.argv.slice(2));
msg(JSON.stringify(argv));
destFolder = argv.p || '.';
format = argv.f || 'yml';
genI18nFromSrc(argv.s, destFolder, format);
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
//# sourceMappingURL=data:application/json;base64,
