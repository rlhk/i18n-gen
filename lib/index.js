#!/usr/bin/env node
var ref$, reject, each, keys, map, elemIndex, findIndex, join, isType, compact, concat, srcTsv, msg, i18nTSVHandler, fs, slice$ = [].slice;
ref$ = require('prelude-ls'), reject = ref$.reject, each = ref$.each, keys = ref$.keys, map = ref$.map, elemIndex = ref$.elemIndex, findIndex = ref$.findIndex, join = ref$.join, isType = ref$.isType, compact = ref$.compact, concat = ref$.concat;
if (process.argv.length > 2) {
  srcTsv = process.argv[2];
}
msg = function(m){
  return console.log("i18n-gen: " + m);
};
i18nTSVHandler = function(sourceText){
  var ref$, header, lines, locales, headerItems, prefixKeys;
  ref$ = sourceText.split('\r\n'), header = ref$[0], lines = slice$.call(ref$, 1);
  locales = {};
  headerItems = header.split('\t');
  each(function(it){
    if (it !== '' && it !== '#' && it !== 'remark') {
      return locales[it] = elemIndex(it, headerItems);
    }
  })(
  headerItems);
  msg("Generating .yml files ...");
  each(function(lang){
    var yamlLines, outputFile;
    yamlLines = join('\n')(
    map(function(line){
      var lineItems, keyIndex, indentNKey;
      lineItems = line.split('\t');
      keyIndex = findIndex(function(it){
        return it !== '';
      })(
      lineItems);
      if (!isType('Undefined', keyIndex)) {
        indentNKey = repeatString$('  ', keyIndex) + "" + lineItems[keyIndex];
        return line = indentNKey + ": " + lineItems[locales[lang]];
      }
    })(
    lines));
    outputFile = lang + ".i18n.yml";
    msg("\t -> " + outputFile);
    return fs.writeFileSync(outputFile, yamlLines, {
      flag: 'w'
    });
  })(
  keys(
  locales));
  msg("Generating .json files ...");
  prefixKeys = [];
  return each(function(lang){
    var jsonLines, jsonContent, outputFile;
    jsonLines = join(',\n')(
    reject(function(it){
      return it === '';
    })(
    map(function(line){
      var jsonLine, lineItems, keyIndex, compactedItems, thisKey, thisValue;
      jsonLine = '';
      lineItems = line.split('\t');
      keyIndex = findIndex(function(it){
        return it !== '';
      })(
      lineItems);
      compactedItems = compact(lineItems);
      if (keyIndex === 0) {
        prefixKeys = [];
      }
      if (compactedItems.length === 1) {
        prefixKeys[keyIndex] = compactedItems[0];
      }
      if (compactedItems.length > 1) {
        thisKey = compactedItems[0];
        thisValue = lineItems[locales[lang]].replace(/\"/gi, '\\"');
        jsonLine = "  \"" + join('.')(
        concat([prefixKeys, [thisKey]])) + "\" : \"" + thisValue + "\"";
      }
      return jsonLine;
    })(
    lines)));
    jsonContent = "{\n" + jsonLines + "\n}";
    outputFile = lang + ".json";
    msg("\t -> " + outputFile);
    return fs.writeFileSync(outputFile, jsonContent, {
      flag: 'w'
    });
  })(
  keys(
  locales));
};
console.log("processing: " + srcTsv);
fs = require('fs');
fs.readFile(srcTsv, 'utf-8', function(err, data){
  return i18nTSVHandler(data);
});
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
//# sourceMappingURL=data:application/json;base64,
